<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gd.lms.mapper.AccountMapper">
	<!-- 계정 활성화 상태값 -->
	<select id="selectAccountState" parameterType="com.gd.lms.vo.Account"
		resultType="String">
		SELECT
			account_state accountState
		FROM account
		WHERE account_id = #{accountId} AND account_pw = PASSWORD(#{accountPw})
	</select>
	<!-- /계정 활성화 상태값 -->
	
	<!-- 계정 활성화 상태값 수정 - 휴면 -> 활성화  -->
	<update id="updateAccountStateByMember" parameterType="com.gd.lms.vo.Account">
		UPDATE account
		SET account_state = '활성화'
		WHERE account_id = #{accountId} AND account_pw = PASSWORD(#{accountPw})
	</update>
	<!-- /계정 활성화 상태값 수정 - 휴면 -> 활성화  -->
	
	<!-- 계정 마지막 로그인날짜로부터 90일동안 로그인 안했다면 활성화 상태값 수정 - 활성화 -> 휴면 -->
	<update id="updateAccountStateByMemberLastLogin">
		UPDATE account
		SET account_state = '휴면'
		WHERE DATEDIFF(NOW(), last_login_date) >= 90 AND account_state = '활성화'
	</update>
	<!-- /계정 마지막 로그인날짜로부터 90일동안 로그인 안했다면 활성화 상태값 수정 - 활성화 -> 휴면 -->
	
	<!-- 로그인 -->
	<select id="selectLogin" parameterType="com.gd.lms.vo.Account"
		resultType="com.gd.lms.vo.Account">
		SELECT
			 account_id accountId
		   , account_level accountLevel
		FROM account
		WHERE account_id = #{accountId} AND account_pw = PASSWORD(#{accountPw})
	</select>
	<!-- /로그인 -->
	
	
	
	<!-- 마지막 로그인날짜 업데이트 -->
	<update id="updateLastLoginDate" parameterType="String">
		UPDATE account
		SET last_login_date = NOW()
		WHERE account_id = #{accountId}
	</update>  
	<!-- /마지막 로그인날짜 업데이트 -->
	
	<!-- 로그인시 해당 레벨 받기 -->
	<select id="selectMemberLevelByAccountId" parameterType="String"
		resultType="int">
		SELECT
			account_level accountLevel
		FROM account
		WHERE account_id = #{accountId}
	</select>
	<!-- /로그인시 해당 레벨 받기 -->
	
	<!-- 멤버 아이디 찾기 -->
	<select id="selectMemberAccountId" parameterType="map" resultType="String">
		SELECT
			a.account_id accountId
		FROM account a
		<if test="'student'.equals(memberCheck)">
			INNER JOIN student s 
			ON a.account_id = s.account_id
			WHERE s.student_name = #{memberName} AND s.student_email = #{memberEmail}
		</if>
		<if test="'teacher'.equals(memberCheck)">
			INNER JOIN teacher t
			ON a.account_id = t.account_id
			WHERE t.teacher_name = #{memberName} AND t.teacher_email = #{memberEmail}
		</if>
		<if test="'manager'.equals(memberCheck)">
			INNER JOIN manager m 
			ON a.account_id = m.account_id
			WHERE m.manager_name = #{memberName} AND m.manager_email = #{memberEmail}
		</if>
	</select>
	<!-- /멤버 아이디 찾기 -->
	
	<!-- 멤버 비밀번호 찾기 -->
	<select id="selectMemberAccountPw" parameterType="map" resultType="int">
		SELECT
			COUNT(*) cnt
		FROM account a
		<if test="'student'.equals(memberCheck)">
			INNER JOIN student s 
			ON a.account_id = s.account_id
			WHERE s.account_id = #{accountId} AND s.student_name = #{memberName}
		</if>
		<if test="'teacher'.equals(memberCheck)">
			INNER JOIN teacher t
			ON a.account_id = t.account_id
			WHERE s.account_id = #{accountId} AND t.teacher_name = #{memberName}
		</if>
		<if test="'manager'.equals(memberCheck)">
			INNER JOIN manager m 
			ON a.account_id = m.account_id
			WHERE s.account_id = #{accountId} AND m.manager_name = #{memberName}
		</if>
	</select>
	<!-- /멤버 비밀번호 찾기 -->
	
	<!-- 개인 정보 수정 및 탈퇴 하기위한 비밀번호 확인-->
	<select id="accountPwCheck" parameterType="com.gd.lms.vo.Account" resultType="int">
		SELECT COUNT(*)
		FROM account
		WHERE account_id = #{accountId} AND account_pw = PASSWORD(#{accountPw})
	</select>
	<!-- /학생 개인정보 수정&삭제를 위한 비밀번호확인 -->
	
	<!-- 멤버 비밀번호 변경 -->
	<update id="updateMemberAccountPw" parameterType="com.gd.lms.vo.Account">
		UPDATE account 
		SET account_pw = PASSWORD(#{accountPw}), update_date = NOW()
		WHERE account_id = #{accountId}
	</update>
	<!-- /멤버 비밀번호 변경 -->
	
	<!-- (학생, 강사, 행정) 멤버 비밀번호 변경날짜 업데이트 -->
	<update id="updateAccountPwRecordUpdateDate" parameterType="String">
		UPDATE pw_record
		SET update_date = NOW()
		WHERE update_date = #{updateDate}
	</update>  
	<!-- /(학생, 강사, 행정) 멤버 비밀번호 변경날짜 업데이트 -->
	
	<!-- (학생, 강사, 행정) 멤버 마지막 비밀번호 변경한 날짜 -->
	<select id="selectAccountPwRecordUpdteDate" parameterType="String"
		resultType="String">
		SELECT
			update_date updateDate
		FROM pw_record
		WHERE account_id = #{accountId}
		ORDER BY update_date DESC
		LIMIT 1
	</select>
	<!-- /(학생, 강사, 행정) 멤버 마지막 비밀번호 변경한 날짜-->
	
	<!-- (학생, 강사, 행정) 멤버 마지막 비밀번호 변경 날짜로부터 몇일 지났는지 -->
	<select id="selectAccountPwRecordByDiffDate" parameterType="String"
		resultType="int">
		SELECT
			DATEDIFF(NOW(), update_date)
		FROM pw_record
		WHERE account_id = #{accountId}
		ORDER BY update_date DESC
		LIMIT 0, 1
	</select>
	<!-- /(학생, 강사, 행정) 멤버 마지막 비밀번호 변경 날짜로부터 몇일 지났는지 -->
	
	<!-- (학생, 강사, 행정) 비밀번호 변경시 새로운 비밀번호와 기존 비밀번호 비교 -->
	<select id="checkNewAccoutPwByPrAccoutPw" parameterType="com.gd.lms.vo.Account"
		resultType="int">
		SELECT COUNT(*)
		FROM pw_record
		WHERE account_id = #{accountId} AND account_pw = PASSWORD(#{accountPw})
		ORDER BY update_date DESC 
		LIMIT 0,1
	</select>
	<!-- /(학생, 강사, 행정) 비밀번호 변경시 새로운 비밀번호와 기존 비밀번호 비교 -->
	
	<!-- (학생, 강사, 행정) 비밀번호 변경시 pw_record 테이블에 추가 -->
	<insert id="insertPwRecordByAccount" parameterType="com.gd.lms.vo.Account">
		INSERT INTO pw_record
			VALUES(#{accountId},PASSWORD(#{accountPw}),NOW())
	</insert>
	<!-- /(학생, 강사, 행정) 비밀번호 변경시 pw_record 테이블에 추가 -->
	
	<!-- 회원가입 -->
	<insert id="insertMember" parameterType="com.gd.lms.vo.Member">
		<!-- 행정테이블에 추가 -->
		<if test="'manager'.equals(memberCheck)">
			INSERT INTO manager
		</if>
		<!-- 강사테이블에 추가 -->
		<if test="'teacher'.equals(memberCheck)">
			INSERT INTO teacher
		</if>
		<!-- 학생테이블에 추가 -->
		<if test="'student'.equals(memberCheck)">
			INSERT INTO student
		</if>
			VALUES(
			  #{accountId}
			, #{memberName}
			, #{memberGender}
			, #{memberBirth}
			, #{memberEmail}
			, #{memberAddress}
			, #{memberDetailAddress}
			, #{memberPhone}
		<if test="'manager'.equals(memberCheck)">
			, #{memberDept}
		</if>
		<if test="'student'.equals(memberCheck)">
			, #{memberGraduate}
			, #{memberMajor}
			, #{memberMilitary}
		</if>
			, NOW()
			, NOW()
		)
	</insert>
	<!-- /회원가입 -->
	
	<!--  account 테이블에 추가 -->
	<insert id="insertAccount" parameterType="com.gd.lms.vo.Member">
		INSERT INTO account
		VALUES(
		  #{accountId}
		, PASSWORD(#{accountPw})
		, '대기'
		, #{accountLevel}
		, NOW()
		, NOW()
		, NOW()
		)
	</insert>
	<!--  /account 테이블에 추가 -->
	
	<!-- 아이디 중복체크 -->
	<select id="selectAccountIdCnt" parameterType="String" resultType="int">
		SELECT COUNT(*)
		FROM account
		WHERE account_id = #{idck}
	</select>
	<!-- /아이디 중복체크 -->
	
	<!-- 이메일 중복체크 / student -->
	<select id="selectStudentEmailCnt" parameterType="String" resultType="int">
		SELECT COUNT(*)
			FROM student
			WHERE student_email= #{email}
	</select>
	<!-- /이메일 중복체크 / student -->	
	
	<!-- 이메일 중복체크 / teacher -->
	<select id="selectTeacherEmailCnt" parameterType="String" resultType="int">
		SELECT COUNT(*)
			FROM teacher
			WHERE teacher_email= #{email}
	</select>
	<!-- /이메일 중복체크 / teacher -->	
	
	<!-- 이메일 중복체크 / manager -->
	<select id="selectManagerEmailCnt" parameterType="String" resultType="int">
		SELECT COUNT(*)
			FROM manager
			WHERE manager_email= #{email}
	</select>
	<!-- /이메일 중복체크 / manager -->
	
	<!-- 회원가입 학생 승인대기리스트 -->
	<select id="selectWaitStudentList"  resultType="com.gd.lms.vo.Student">
		SELECT s.account_id accountId
			 , s.student_name studentName
			 , s.student_gender studentGender
			 , s.student_birth studentBirth
			 , s.student_email studentEmail
			 , s.student_phone studentPhone
			 , s.create_date createDate
			FROM student s INNER JOIN account a
			ON s.account_id = a.account_id
			WHERE s.account_id = a.account_id AND a.account_state = '대기'
			ORDER BY s.create_date DESC;
	</select>
	<!-- /회원가입 학생 승인대기리스트 -->
	
	<!--회원가입 강사 승인대기리스트 -->
	<select id="selectWaitTeacherList" resultType="com.gd.lms.vo.Teacher">
		SELECT t.account_id accountId
			 , t.teacher_name teacherName
			 , t.teacher_gender teacherGender
			 , t.teacher_birth teacherBirth
			 , t.teacher_email teacherEmail
			 , t.teacher_phone teacherPhone
			 , t.create_date createDate
			FROM teacher t INNER JOIN account a
			ON t.account_id = a.account_id
			WHERE t.account_id = a.account_id AND a.account_state = '대기'
			ORDER BY t.create_date DESC;
	</select>
	<!-- /회원가입 강사 승인대기리스트 -->
	
	<!-- 회원가입 행정 승인대기리스트 -->
	<select id="selectWaitManagerList" resultType="com.gd.lms.vo.Manager">
		SELECT m.account_id accountId
			 , m.manager_name managerName
			 , m.manager_gender managerGender
			 , m.manager_birth managerBirth
			 , m.manager_email managerEmail
			 , m.manager_phone managerPhone
			 , m.create_date createDate
			FROM manager m INNER JOIN account a
			ON m.account_id = a.account_id
			WHERE m.account_id = a.account_id AND a.account_state = '대기'
			ORDER BY m.create_date DESC;
	</select>
	<!-- /회원가입 행정 승인대기리스트 -->
	
	<!-- 회원가입 승인 -->
	<update id="updateApproveWaitMemberList" parameterType="String">
		UPDATE account
		SET account_state = '활성화'
		WHERE account_id = #{accountId}
	</update>
	<!-- /회원가입 승인 -->
	
	<!-- 회원가입 거절  -->
	<update id="updateDeniedWaitMemberList" parameterType="String">
		UPDATE account
		SET account_state = '거절'
		WHERE account_id = #{accountId}
	</update>
	<!-- /회원가입 거절 -->

</mapper>