<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gd.lms.mapper.MessageMapper">

<!-- 전체 메시지 리스트 조회-->
<!-- 수발신인명만 있으면 되고 아이디는 굳이 노출할 필요 x -->
<select id="selectMessageList" parameterType="String" resultType="map">
	SELECT	
			from_name			fromName,
			to_name				toName,
			message_content		messageContent,
			is_confirm			isConfirm,
			message_datetime	messageDatetime
	FROM	message
	WHERE to_id=#{toId} or from_id=#{fromId}
</select>

<!-- 받은 메시지 리스트 조회 -->
<select id="selectReceiveMessageList" parameterType="String" resultType="map">
	SELECT	
			from_name			fromName,
			to_name				toName,
			message_content		messageContent,
			is_confirm			isConfirm,
			message_datetime	messageDatetime
	FROM	message
	WHERE 	to_id=#{toId} 
</select>

<!-- 보낸 메시지 리스트 조회 -->
<select id="selectSentMessageList" parameterType="String" resultType="map">
	SELECT	
			from_name			fromName,
			to_name				toName,
			message_content		messageContent,
			is_confirm			isConfirm,
			message_datetime	messageDatetime
	FROM	message
	WHERE 	from_id=#{fromId}
</select>



<!-- 안 읽은 메시지 카운팅 -->
<select id="selectUnreadMessageCnt" parameterType="String" resultType="int">
	SELECT 	count(*) 
	FROM 	notice
	WHERE	is_confirm='N' and to_id=#{toId}
</select> 


<!-- 수/발신 메시지 상세보기 -->
<!-- is_confirm이 'N'일 경우 = 처음 열람한 메시지일 경우 'Y'으로 업데이트 필요 -->
<select id="selectMessageOne" parameterType="int" resultType="com.gd.lms.vo.Message">
	SELECT
			from_name		 	fromName,
			to_name				toName,
			message_content		messageContent,
			is_confirm			isConfirm
			message_datetime	messageDatetime
	FROM	message
	WHERE	message_no=#{messageNo};
<!-- 
if(어짜구.getisConfirm()="no"){
	어짜구.put("isConfirm", "yes");
	}
 -->
</select>

<!-- 메시지 보내기 -->
<!-- toId와 fromID를 넣어 db에 저장하면 각 보낸/받은 메시지함에 노출되도록 새로고침 시마다 갱신 -->
<insert id="insertMessage" parameterType="com.gd.lms.vo.Message" >
	INSERT INTO message(
				from_id				fromId,
				to_id				toId,
				from_name		 	fromName,
				to_name				toName,
				message_content		messageContent,
				message_datetime	messageDatetime	
	) VALUES(
				#{fromId},
				#{toID},
				#{fromName},
				#{toName},
				#{messageContent},
				NOW())
</insert>

<!-- 받은 메시지 삭제 -->
<!-- 상대가 보기 전 메시지 발송취소 기능은 해당 쿼리 service 단에서 활용해 따로 만들기 -->
<delete id="deleteMessage" parameterType="int" >
	DELETE FROM message
	WHERE		message_no=#{messageNo}
</delete>


</mapper>